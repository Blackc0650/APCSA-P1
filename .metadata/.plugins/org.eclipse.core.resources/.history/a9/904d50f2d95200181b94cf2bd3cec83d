package labs.extensions.lab15;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Canvas;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import static java.lang.Character.*;
import java.awt.image.BufferedImage;
@SuppressWarnings("serial")
public class Pong extends Canvas implements KeyListener, Runnable {
    private Ball ball;
    private Paddle paddle;
    private boolean[] keys;
    private BufferedImage back;
    int rightScore = 0;
    int leftScore = 0;
    public Pong() {
        keys = new boolean[4];
        ball = new Ball(400, 400, 5, 5, Color.BLACK, 3, 1);
        paddle = new Paddle(TheGame.WIDTH / 2,TheGame.HEIGHT / 2,40,40,Color.RED,3);
        setBackground(Color.WHITE);
        setVisible(true);
        new Thread(this).start();
        addKeyListener(this); //starts the key thread to log key strokes
    }
    public void update(Graphics window) {
        paint(window);
    }
    public void paint(Graphics window) {
        //set up the double buffering to make the game animation nice and smooth
        Graphics2D twoDGraph = (Graphics2D) window;
        //take a snap shop of the current screen and same it as an image
        //that is the exact same width and height as the current screen
        if (back == null)
            back = (BufferedImage)(createImage(getWidth(), getHeight()));
        //create a graphics reference to the back ground image
        //we will draw all changes on the background image
        Graphics graphToBack = back.createGraphics();
        graphToBack.setColor(Color.WHITE);
        graphToBack.fillRect(0, 0, TheGame.WIDTH, TheGame.HEIGHT);
        paddle.draw(graphToBack);
        if(keys[0]) {
        	paddle.move('U');
        }
        if(keys[1]) {
        	paddle.move('D');
        }
        if(keys[2]) {
        	paddle.move('R');
        }
        if(keys[3]) {
        	paddle.move('L');
        }
        twoDGraph.drawImage(back, null, 0, 0);
    }

    public void keyPressed(KeyEvent e) {
        System.out.println(e.getKeyChar());
        switch (e.getKeyCode()) {

            case KeyEvent.VK_UP:
                keys[0] = true;
                break;
            case KeyEvent.VK_DOWN:
                keys[1] = true;
                break;
            case KeyEvent.VK_RIGHT:
                keys[2] = true;
                break;
            case KeyEvent.VK_LEFT:
                keys[3] = true;
                break;
        }
    }

    public void keyReleased(KeyEvent e) {
        System.out.println(e.getKeyChar());
        switch (e.getKeyCode()) {
            case KeyEvent.VK_UP:
                keys[0] = false;
                break;
            case KeyEvent.VK_DOWN:
                keys[1] = false;
                break;
            case KeyEvent.VK_RIGHT:
                keys[2] = false;
                break;
            case KeyEvent.VK_LEFT:
                keys[3] = false;
                break;
        }
    }

    public void keyTyped(KeyEvent e) {}

    @SuppressWarnings("static-access")
    public void run() {
        try {
            while (true) {
                Thread.currentThread().sleep(8);
                repaint();
            }
        } catch (Exception e) {}
    }
}