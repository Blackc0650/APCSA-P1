package labs.extensions.lab15;
import java.awt.Color;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Canvas;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
@SuppressWarnings("serial")
public class Pong extends Canvas implements KeyListener, Runnable {
    private Ball ball;
    private Paddle paddle;
    private boolean[] keys;
    private BufferedImage back;
    int rightScore = 0;
    int leftScore = 0;
    private TileManager tileManager;
    public Pong() {
        keys = new boolean[4];
        ball = new Ball(TheGame.WIDTH / 2, TheGame.HEIGHT / 4, 10, 10, Color.BLACK, -1, -1);
        paddle = new Paddle(TheGame.WIDTH / 2,TheGame.HEIGHT / 2,40,40,new Color(224, 75, 49),1);
        tileManager = new TileManager(16);
        tileManager.addHorizontal(2,null);
        tileManager.addVertical(2);
        setBackground(Color.WHITE);
        setVisible(true);
        new Thread(this).start();
        addKeyListener(this);
    }
    public void update(Graphics window) {
        paint(window);
    }
    public void paint(Graphics window) {
        Graphics2D twoDGraph = (Graphics2D) window;
        if (back == null)
            back = (BufferedImage)(createImage(getWidth(), getHeight()));
        Graphics graphToBack = back.createGraphics();
        graphToBack.setColor(Color.WHITE);
        graphToBack.fillRect(0, 0, TheGame.WIDTH, TheGame.HEIGHT);
        paddle.draw(graphToBack);
        ball.moveAndDraw(graphToBack);
        if(keys[0])
        	paddle.move('U');
        if(keys[1])
        	paddle.move('D');
        if(keys[2])
        	paddle.move('R');
        if(keys[3])
        	paddle.move('L');
        tileManager.updateDirection(ball);
        tileManager.updateBallDirection(ball);
        if(ball.getX() < 10 || ball.getX() > TheGame.WIDTH - 10) {
        	ball.setXSpeed(ball.getXSpeed() * -1);
        }
        else if(ball.getY() < 10 || ball.getY() > TheGame.HEIGHT - 30) {
        	ball.setYSpeed(ball.getYSpeed() * -1);
        }
        tileManager.drawAll(graphToBack);
        TileManager.updateQuadBox(paddle);
        TileManager.updateBlockDirection(ball, paddle);
        TileManager.updateBallDirection(ball, paddle);
        tileManager.getLevelStatus();
        twoDGraph.drawImage(back, null, 0, 0);
    }

    public void keyPressed(KeyEvent e) {
        System.out.println(e.getKeyChar());
        switch (e.getKeyCode()) {

            case KeyEvent.VK_UP:
                keys[0] = true;
                break;
            case KeyEvent.VK_DOWN:
                keys[1] = true;
                break;
            case KeyEvent.VK_RIGHT:
                keys[2] = true;
                break;
            case KeyEvent.VK_LEFT:
                keys[3] = true;
                break;
        }
    }

    public void keyReleased(KeyEvent e) {
        System.out.println(e.getKeyChar());
        switch (e.getKeyCode()) {
            case KeyEvent.VK_UP:
                keys[0] = false;
                break;
            case KeyEvent.VK_DOWN:
                keys[1] = false;
                break;
            case KeyEvent.VK_RIGHT:
                keys[2] = false;
                break;
            case KeyEvent.VK_LEFT:
                keys[3] = false;
                break;
        }
    }
    public void keyTyped(KeyEvent e) {}
    @SuppressWarnings("static-access")
    public void run() {
        try {
            while (true) {
                Thread.currentThread().sleep(8);
                repaint();
            }
        } catch (Exception e) {}
    }
}